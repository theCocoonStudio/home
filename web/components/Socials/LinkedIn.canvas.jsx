/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 /Users/dialectic/Downloads/source/linkdin.glb --transform 
Files: /Users/dialectic/Downloads/source/linkdin.glb [703.37KB] > /Users/dialectic/repositories/thecocoonstudio/izzy/linkdin-transformed.glb [55.49KB] (92%)
*/
import Model from 'public/models/linkdin-transformed.glb'
import { useGLTF } from '@react-three/drei'
import { forwardRef, useEffect, useImperativeHandle, useRef } from 'react'

export const LinkedIn = forwardRef(function LinkedIn(
  { colorTheme, ...props },
  ref,
) {
  const { nodes } = useGLTF(Model)
  const group = useRef()
  useImperativeHandle(ref, () => group.current)

  useEffect(() => {
    const geometry = nodes.Object_1002_1.geometry
    geometry.center()

    const { min, max } = geometry.boundingBox
    const factor = 0.5 / (Math.abs(max.x) + Math.abs(min.x))

    geometry.scale(factor, factor, factor)

    return () => {
      nodes.Object_1002_1.geometry?.dispose()
    }
  }, [nodes.Object_1002_1.geometry])

  return (
    <group {...props} ref={group}>
      <mesh
        geometry={nodes.Object_1002_1.geometry}
        rotation-x={Math.PI / 2}
        position-y={0.03}
      >
        <meshStandardMaterial
          roughness={0.2}
          metalness={0.4}
          color={colorTheme.white}
          opacity={0.8}
          transparent
        />
      </mesh>
    </group>
  )
})
useGLTF.preload(Model)
