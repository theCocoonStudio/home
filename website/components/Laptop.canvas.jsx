/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import Model from 'website/assets/Laptop/Laptop.glb'
import { useGLTF } from '@react-three/drei'
import { forwardRef, useImperativeHandle, useMemo, useRef } from 'react'
import { useScreenTexture } from './useScreenTexture.canvas'

export const Laptop = forwardRef(function Laptop({ ...props }, forwardedRef) {
  // refs
  const laptop = useRef()
  const screen = useRef()

  // model
  const { nodes, materials } = useGLTF(Model)

  // screen
  const screenAspect = useMemo(() => {
    const { width, height } = materials['screen.001'].map.source.data
    materials['screen.001']?.dispose()
    return width / height
  }, [materials])

  const screenFbo = useScreenTexture({ aspect: screenAspect })

  // imperative handle
  useImperativeHandle(forwardedRef, () => ({
    laptop: laptop.current,
    screen: screen.current,
  }))

  return (
    <group
      ref={laptop}
      /* dispose={null} */
      position={[0.3, 0.75, -0.4]}
      scale={0.05}
    >
      <group position={[0.002, -0.038, 0.414]} rotation={[0.014, 0, 0]}>
        <group position={[0, 2.965, -0.13]} rotation={[Math.PI / 2, 0, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube008.geometry}
            material={materials.aluminium}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Cube008_1.geometry}
            material={materials['matte.001']}
          />
          <mesh
            ref={screen}
            castShadow
            receiveShadow
            geometry={nodes.Cube008_2.geometry}
            /* material={materials['screen.001']} */
          >
            <meshBasicMaterial map={screenFbo.texture} />
          </mesh>
        </group>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.keyboard.geometry}
        material={materials.keys}
        position={[1.793, 0, 3.451]}
      />
      <group position={[0, -0.1, 3.394]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002.geometry}
          material={materials.aluminium}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cube002_1.geometry}
          material={materials.trackpad}
        />
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.touchbar.geometry}
        material={materials.touchbar}
        position={[0, -0.027, 1.201]}
      />
    </group>
  )
})

useGLTF.preload(Model)
